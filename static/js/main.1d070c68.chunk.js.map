{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Container/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","kittens","map","user","key","SearchBox","inputChange","type","placeholder","onChange","App","onInputChange","event","setState","searchValue","target","value","state","fetch","then","response","json","this","filterKittens","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAgBeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvB,OACG,yBAAKC,UAAU,QACZ,yBAAMC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAI,UACnE,yBAAKF,UAAU,YACZ,4BAAKF,GACL,2BAAIC,MCODI,EAZE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACG,yBAAKJ,UAAU,sBAETI,EAAQC,KAAI,SAAAC,GACT,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKT,GAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCMrES,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAClB,OACG,6BACG,2BACGT,UAAU,YACVU,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCsCPI,G,wDAxCZ,aAAe,IAAD,8BACX,gBAaHC,cAAgB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAb3C,EAAKC,MAAQ,CACVhB,QAAU,GACVa,YAAc,IAJN,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAI,OAAI,EAAKU,SAAS,CAAEZ,QAASE,S,+BAOhC,IAAD,EAE4BmB,KAAKL,MAA/BhB,EAFF,EAEEA,QAAUa,EAFZ,EAEYA,YAEZS,EAAgBtB,EAAQuB,QAAQ,SAAArB,GACnC,OAAOA,EAAKR,KAAK8B,cAAcC,SAASZ,EAAYW,kBAGvD,OAAQxB,EAAQ0B,OAGb,yBAAK9B,UAAU,kBACZ,gEACA,kBAAC,EAAD,CAAWS,YAAagB,KAAKX,gBAC7B,kBAAC,EAAD,CAAUV,QAASsB,KALzB,6C,GA7BYK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1d070c68.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nconst Card = ( {id, name, email} ) => {\r\n   return (\r\n      <div className=\"card\">\r\n         <img  src={`https://robohash.org/${id}?set=set4&size=160x160`} alt=\"kitty\" />\r\n         <div className=\"userInfo\">\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Card;\r\n","\r\nimport React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ( {kittens} ) => {\r\n   return (\r\n      <div className=\"cardList_container\">\r\n         {\r\n            kittens.map(user => {\r\n               return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n            })\r\n         }\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default CardList;","\r\nimport React from 'react';\r\n\r\nconst SearchBox = ({ inputChange }) => {\r\n   return (\r\n      <div>\r\n         <input\r\n            className=\"searchbox\" \r\n            type=\"search\" \r\n            placeholder=\"search Kittens...\" \r\n            onChange={inputChange}\r\n         />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default SearchBox;","\r\nimport React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         kittens : [],\r\n         searchValue : \"\"\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(user => this.setState({ kittens: user })); \r\n   }\r\n\r\n   onInputChange = (event) => {\r\n      this.setState({ searchValue : event.target.value });\r\n   }\r\n\r\n   render() {\r\n\r\n      const { kittens , searchValue } = this.state;\r\n\r\n      const filterKittens = kittens.filter( user => {\r\n         return user.name.toLowerCase().includes(searchValue.toLowerCase());\r\n      });\r\n\r\n      return !kittens.length ? \r\n      <h1>Loding...</h1> :\r\n      (\r\n         <div className=\"main_container\">\r\n            <h1>Your Awesome Friends, Kittens!!!</h1>\r\n            <SearchBox inputChange={this.onInputChange} />\r\n            <CardList kittens={filterKittens} />\r\n         </div>\r\n      );\r\n      \r\n   }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />\n, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}